"""
MIT License

Copyright (c) 2022-present japandotorg

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""

from typing import Any

from ..sql import operators

class UnevaluatableError(Exception): ...

class _NoObject(operators.ColumnOperators[Any]):
    def operate(self, *arg, **kw) -> None: ...
    def reverse_operate(self, *arg, **kw) -> None: ...

class EvaluatorCompiler:
    target_cls: Any
    def __init__(self, target_cls: Any | None = ...) -> None: ...
    def process(self, *clauses): ...
    def visit_grouping(self, clause): ...
    def visit_null(self, clause): ...
    def visit_false(self, clause): ...
    def visit_true(self, clause): ...
    def visit_column(self, clause): ...
    def visit_tuple(self, clause): ...
    def visit_clauselist(self, clause): ...
    def visit_binary(self, clause): ...
    def visit_unary(self, clause): ...
    def visit_bindparam(self, clause): ...
