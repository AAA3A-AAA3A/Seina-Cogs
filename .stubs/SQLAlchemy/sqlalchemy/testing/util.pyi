"""
MIT License

Copyright (c) 2022-present japandotorg

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""

from typing import Any

def non_refcount_gc_collect(
    *args,
) -> None: ...  # only present on Python implementations with non-refcount gc
def gc_collect(generation: int = ...) -> None: ...
def lazy_gc() -> None: ...
def picklers(): ...
def random_choices(population, k: int = ...): ...
def round_decimal(value, prec): ...

class RandomSet(set[Any]):
    def __iter__(self): ...
    def pop(self): ...
    def union(self, other): ...
    def difference(self, other): ...
    def intersection(self, other): ...
    def copy(self): ...

def conforms_partial_ordering(tuples, sorted_elements): ...
def all_partial_orderings(tuples, elements): ...
def function_named(fn, name): ...
def run_as_contextmanager(ctx, fn, *arg, **kw): ...
def rowset(results): ...
def fail(msg) -> None: ...
def provide_metadata(fn, *args, **kw): ...
def flag_combinations(*combinations): ...
def lambda_combinations(lambda_arg_sets, **kw): ...
def resolve_lambda(__fn, **kw): ...
def metadata_fixture(ddl: str = ...): ...
def force_drop_names(*names): ...

class adict(dict[Any, Any]):
    def __getattribute__(self, key): ...
    def __call__(self, *keys): ...
    get_all: Any

def drop_all_tables_from_metadata(metadata, engine_or_connection) -> None: ...
def drop_all_tables(
    engine, inspector, schema: Any | None = ..., include_names: Any | None = ...
) -> None: ...
def teardown_events(event_cls): ...
