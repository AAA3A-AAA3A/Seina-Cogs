"""
MIT License

Copyright (c) 2022-present japandotorg

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""

from typing import Any

def cache(fn, self, con, *args, **kw): ...

class Inspector:
    def __init__(self, bind): ...
    @classmethod
    def from_engine(cls, bind): ...
    @property
    def default_schema_name(self): ...
    def get_schema_names(self): ...
    def get_table_names(self, schema: Any | None = ...): ...
    def has_table(self, table_name, schema: Any | None = ...): ...
    def has_sequence(self, sequence_name, schema: Any | None = ...): ...
    def get_sorted_table_and_fkc_names(self, schema: Any | None = ...): ...
    def get_temp_table_names(self): ...
    def get_temp_view_names(self): ...
    def get_table_options(self, table_name, schema: Any | None = ..., **kw): ...
    def get_view_names(self, schema: Any | None = ...): ...
    def get_sequence_names(self, schema: Any | None = ...): ...
    def get_view_definition(self, view_name, schema: Any | None = ...): ...
    def get_columns(self, table_name, schema: Any | None = ..., **kw): ...
    def get_pk_constraint(self, table_name, schema: Any | None = ..., **kw): ...
    def get_foreign_keys(self, table_name, schema: Any | None = ..., **kw): ...
    def get_indexes(self, table_name, schema: Any | None = ..., **kw): ...
    def get_unique_constraints(self, table_name, schema: Any | None = ..., **kw): ...
    def get_table_comment(self, table_name, schema: Any | None = ..., **kw): ...
    def get_check_constraints(self, table_name, schema: Any | None = ..., **kw): ...
    def reflecttable(self, *args, **kwargs): ...
    def reflect_table(
        self,
        table,
        include_columns,
        exclude_columns=...,
        resolve_fks: bool = ...,
        _extend_on: Any | None = ...,
    ) -> None: ...
