"""
MIT License

Copyright (c) 2022-present japandotorg

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""

from typing import Any

def skip_if(predicate, reason: Any | None = ...): ...
def fails_if(predicate, reason: Any | None = ...): ...

class compound:
    fails: Any
    skips: Any
    tags: Any
    def __init__(self) -> None: ...
    def __add__(self, other): ...
    def as_skips(self): ...
    def add(self, *others): ...
    def not_(self): ...
    @property
    def enabled(self): ...
    def enabled_for_config(self, config): ...
    def matching_config_reasons(self, config): ...
    def include_test(self, include_tags, exclude_tags): ...
    def __call__(self, fn): ...
    def fail_if(self) -> None: ...

def requires_tag(tagname): ...
def tags(tagnames): ...
def only_if(predicate, reason: Any | None = ...): ...
def succeeds_if(predicate, reason: Any | None = ...): ...

class Predicate:
    @classmethod
    def as_predicate(cls, predicate, description: Any | None = ...): ...

class BooleanPredicate(Predicate):
    value: Any
    description: Any
    def __init__(self, value, description: Any | None = ...) -> None: ...
    def __call__(self, config): ...

class SpecPredicate(Predicate):
    db: Any
    op: Any
    spec: Any
    description: Any
    def __init__(
        self, db, op: Any | None = ..., spec: Any | None = ..., description: Any | None = ...
    ) -> None: ...
    def __call__(self, config): ...

class LambdaPredicate(Predicate):
    lambda_: Any
    args: Any
    kw: Any
    description: Any
    def __init__(
        self, lambda_, description: Any | None = ..., args: Any | None = ..., kw: Any | None = ...
    ): ...
    def __call__(self, config): ...

class NotPredicate(Predicate):
    predicate: Any
    description: Any
    def __init__(self, predicate, description: Any | None = ...) -> None: ...
    def __call__(self, config): ...

class OrPredicate(Predicate):
    predicates: Any
    description: Any
    def __init__(self, predicates, description: Any | None = ...) -> None: ...
    def __call__(self, config): ...

def db_spec(*dbs): ...
def open(): ...
def closed(): ...
def fails(reason: Any | None = ...): ...
def future(fn, *arg): ...
def fails_on(db, reason: Any | None = ...): ...
def fails_on_everything_except(*dbs): ...
def skip(db, reason: Any | None = ...): ...
def only_on(dbs, reason: Any | None = ...): ...
def exclude(db, op, spec, reason: Any | None = ...): ...
def against(config, *queries): ...
