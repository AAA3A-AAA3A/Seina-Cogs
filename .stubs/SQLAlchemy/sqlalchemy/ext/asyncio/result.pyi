"""
MIT License

Copyright (c) 2022-present japandotorg

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""

from typing import Any

from ...engine.result import FilterResult

class AsyncCommon(FilterResult):
    async def close(self) -> None: ...

class AsyncResult(AsyncCommon):
    def __init__(self, real_result) -> None: ...
    def keys(self): ...
    def unique(self, strategy: Any | None = ...): ...
    def columns(self, *col_expressions): ...
    async def partitions(self, size: Any | None = ...) -> None: ...
    async def fetchone(self): ...
    async def fetchmany(self, size: Any | None = ...): ...
    async def all(self): ...
    def __aiter__(self): ...
    async def __anext__(self): ...
    async def first(self): ...
    async def one_or_none(self): ...
    async def scalar_one(self): ...
    async def scalar_one_or_none(self): ...
    async def one(self): ...
    async def scalar(self): ...
    async def freeze(self): ...
    def merge(self, *others): ...
    def scalars(self, index: int = ...): ...
    def mappings(self): ...

class AsyncScalarResult(AsyncCommon):
    def __init__(self, real_result, index) -> None: ...
    def unique(self, strategy: Any | None = ...): ...
    async def partitions(self, size: Any | None = ...) -> None: ...
    async def fetchall(self): ...
    async def fetchmany(self, size: Any | None = ...): ...
    async def all(self): ...
    def __aiter__(self): ...
    async def __anext__(self): ...
    async def first(self): ...
    async def one_or_none(self): ...
    async def one(self): ...

class AsyncMappingResult(AsyncCommon):
    def __init__(self, result) -> None: ...
    def keys(self): ...
    def unique(self, strategy: Any | None = ...): ...
    def columns(self, *col_expressions): ...
    async def partitions(self, size: Any | None = ...) -> None: ...
    async def fetchall(self): ...
    async def fetchone(self): ...
    async def fetchmany(self, size: Any | None = ...): ...
    async def all(self): ...
    def __aiter__(self): ...
    async def __anext__(self): ...
    async def first(self): ...
    async def one_or_none(self): ...
    async def one(self): ...
